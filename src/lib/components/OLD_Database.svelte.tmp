<script>
	import { page } from "$app/stores";
	import { goto } from "$app/navigation";
	import { graphql } from "$houdini";
	import { userLocale } from "$lib/stores";
	import DatabaseDetails from "./DatabaseDetails.svelte";
	import EntrySummary from "../../routes/db/EntrySummary.svelte";
	import SearchFilters from "./SearchFilters.svelte";
	import debounce from "lodash/debounce";
	import { filterCategoryTypes } from "$lib/stores";
	import PageControls from "../../routes/db/PageControls.svelte";
    import { resultsPerPage } from "$lib/stores";

	let userSearchInput = $page.url.searchParams.get("search") || "";
	$: userSelectedEntryId = $page.url.searchParams.get("result");

	export let _DatabaseEntriesVariables = () => {
		return {
			searchTerm: userSearchInput,
			totalResults: 10,
			categories: JSON.stringify($filterCategoryTypes),
		};
	};

	let num = 10

	$: {
		$filterCategoryTypes;
		// num;
		updateResults();
	}

	const entries = graphql(`
		query DatabaseEntries($searchTerm: String, $categories: String) @load {
			entries(
				searchTerm: $searchTerm
				categories: $categories
				first: 3
				last: 3
			) @paginate(mode: SinglePage) {
				totalResults
				pageInfo {
					endCursor
					hasNextPage
					hasPreviousPage
					startCursor
				}
				edges {
					node {
						__typename
						id
						name {
							ja_JP
							en_US
						}
						thumb
						category {
							ja_JP
							en_US
						}
						... on Weapon {
							classImg
							elementImg
							attribute
						}
						... on Skill {
							elementImg
							skillBackgroundImg
							skill_type
						}
						... on Imagine {
							elementImg
						}
					}
					cursor
				}
			}
		}
	`);

	const placeholderText = {
		ja_JP: "アイテム名かIDで検索",
		en_US: "Search by item name or id",
	};

	const updateResults = () => {
		_DatabaseEntriesVariables = () => {
			return {
				searchTerm: userSearchInput,
				totalResults: 10,
				categories: JSON.stringify($filterCategoryTypes),
			};
		};
	};

	const updateResultsDebounced = debounce(() => {
		_DatabaseEntriesVariables = () => {
			return {
				searchTerm: userSearchInput,
			};
		};
	}, 500);

	const updateSearchParam = () => {
		userSearchInput
			? $page.url.searchParams.set("search", userSearchInput)
			: $page.url.searchParams.delete("search");

		// Results are pushed to history, but searches are not.
		// To add searches, create a separate function debouncing goto().
		// Without debounce, every letter will be added to history = bad UX.
		// However, as a consequence, the address bar won't update immediately.
		goto(`?${$page.url.searchParams.toString()}`, {
			noScroll: true,
			replaceState: true,
			keepFocus: true,
		});

		updateResultsDebounced();
	};

	const updateResultParam = (node) => {
		userSelectedEntryId = node.__typename + node.id;
		$page.url.searchParams.set("result", userSelectedEntryId);

		goto(`?${$page.url.searchParams.toString()}`, {
			noScroll: true,
			replaceState: false,
			keepFocus: true,
		});
	};

	const loadNextPage = async () => {
		await entries.loadNextPage();
	};

	const loadPreviousPage = async () => {
		await entries.loadPreviousPage();
	};

	// $: console.log($entries)
</script>

<form id="search" class="grid" style:gap="1rem">
	<!-- <SearchFilters /> -->

	<div class="flex g-50">
		<input
			class="box"
			id="search-box"
			type="search"
			placeholder={placeholderText[$userLocale]}
			bind:value={userSearchInput}
			on:input={updateSearchParam}
		/>
		<div class="box">Category</div>
		<div class="box">Level</div>
		<div class="box">Adventurer Rank</div>
		<div class="box">Class</div>
		<div class="box">Element</div>
	</div>

	<!-- <div class="flex">
		<img src="/UI/Icon/Class/UI_IconClass_12.png" alt="" width="48" height="48" />
		<img src="/UI/Icon/Class/UI_IconClass_06.png" alt="" width="48" height="48" />
		<img src="/UI/Icon/Class/UI_IconClass_19.png" alt="" width="48" height="48" />
		<img src="/UI/Icon/Class/UI_IconClass_11.png" alt="" width="48" height="48" />
		<img src="/UI/Icon/Class/UI_IconClass_07.png" alt="" width="48" height="48" />
	</div> -->

	<div class="box">
		<PageControls
			hasPreviousPage={!$entries?.pageInfo?.hasPreviousPage}
			hasNextPage={!$entries?.pageInfo?.hasNextPage}
			totalResults={$entries?.data?.entries.totalResults}
			on:clickPreviousPage={loadPreviousPage}
			on:clickNextPage={loadNextPage}
		/>
		{#if !$entries.fetching}
			<ul id="search-results" role="list">
				{#each $entries.data.entries.edges as entry}
					<li>
						<button
							type="button"
							on:click={() => updateResultParam(entry.node)}
						>
							<EntrySummary {userSearchInput} data={entry.node} />
						</button>
					</li>
				{/each}
			</ul>
		{/if}
	</div>
</form>

<!-- <DatabaseDetails longId={userSelectedEntryId || "Item121000000"} /> -->

<style lang="scss">
	#search-box {
		min-width: 30ch;
	}

	.box {
		border: none;
	}

	ul#search-results {
		list-style-type: none;
		padding: 0;
		margin: 0;
		display: block;
		overflow: visible;
		max-inline-size: none;
		// min-height: 454px;

		li {
			max-inline-size: none;

			&:not(:last-child) {
				border-bottom: 1px solid rgba(255, 255, 255, 0.05);
			}
		}

		button {
			padding: 0.8rem;
			user-select: auto;
			width: 100%;
			background: none;
			border: none;
			text-align: left;

			&:hover,
			&:focus-visible {
				background: var(--surface2);
			}

			&:focus-visible {
				border-radius: 5px;
			}
		}
	}
</style>
