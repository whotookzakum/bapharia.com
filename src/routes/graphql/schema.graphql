scalar Map

type Query {
	entries(searchTerm: String): [DBEntry]
	entry(id: String!): DBEntry
}

interface DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}

type Text {
	ja_JP: String!
	en_US: String!
}

type Item implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text

	sourceDesc: Text
	effectDesc: Text
	item_level: Int
	item_exp: Int
	adventurer_rank: Int
	dungeon_only: Boolean
	no_sale_flag: Boolean
	price_player_sells: Int
	price_player_buys: Int
}

type Enemy implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}

type Costume implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}

type Gesture implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}

type Imagine implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text

	price_player_sells: Int
	imagine_type: Int
	imagine_max_level: Int
	slotImg: String
	elementImg: String
}

type LiquidMemory implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}

type StampSet implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}

type Token implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}

type Weapon implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}

type Skill implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}

type GameMap implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}