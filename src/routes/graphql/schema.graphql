scalar Map

type Query {
	entries(searchTerm: String): [DBEntry]
	entry(id: String!): DBEntry
}

interface DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}

type Text {
	ja_JP: String!
	en_US: String!
}

type Item implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text

	sourceDesc: Text
	effectDesc: Text
	item_level: Int
	item_exp: Int
	adventurer_rank: Int
	dungeon_only: Boolean
	no_sale_flag: Boolean
	price_player_sells: Int
	price_player_buys: Int
}

type Enemy implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}

type Costume implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}

type Gesture implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}

type Imagine implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text

	price_player_sells: Int
	imagine_type: Int
	imagine_max_level: Int
	slotImg: String
	elementImg: String
	params: [LevelParams]!
	abilities: [Ability]!
	recipe: Recipe
}

type Recipe {
	adventurer_rank: Int
	price: Int
	materials: [Material]!
	# Weapon
	use_money: Int
	difficulty: Int
	bonus_rate: Int
	base_ability_rate1: Int
	base_ability_rate2: Int
	base_ability_rate3: Int
	base_ability_rate4: Int
	bonus_ability_rate1: Int
	bonus_ability_rate2: Int
	bonus_ability_rate3: Int
	bonus_ability_rate4: Int
	great_success_tokens: Int
}

# Similar to Item
type Material {
	id: String!
	amount: Int
	name: Text
	sourceDesc: Text
	# Weapon
	need_num: Int
}

type LevelParams {
	level: Int
	skill: Int
	attribute_value: Int
	offensive_power: Int
	str: Int
	vit: Int
	dex: Int
	mnd: Int
	int: Int
	defensive_power: Int
	# Weapon
	critical_power: Int
}

type Ability {
	probability: Int
	name: Text
	# Imagine
	stats: [Stat]!
	# Weapon
	big_success_max_value: Int
	big_success_min_value: Int
	success_max_value: Int
	success_min_value: Int
}

type Stat {
	name: Text
	value: Int
}

type LiquidMemory implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}

type StampSet implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}

type Token implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}

type Weapon implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text

	attribute: Int
	weapon_max_level: Int
	classImg: String
	price_player_sells: Int
	price_player_buys: Int
	elementImg: String
	stats: [LevelParams]!
	abilities: [Ability]!
	recipe: Recipe
	treasureSources: [TreasureSource]
}

type TreasureSource {
	location: GameMap
	name: Text
	probability: Int
}

type Skill implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}

type GameMap implements DBEntry {
	id: String!
	name: Text
	desc: Text
	thumb: String
	category: Text
}